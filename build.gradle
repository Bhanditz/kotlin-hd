plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.10" apply false
}

allprojects {
    repositories {
        jcenter()
    }
}

configure(project(':model')) {
    apply plugin: 'kotlin-platform-common'

    dependencies {
        compile 'org.jetbrains.kotlin:kotlin-stdlib-common:1.2.10'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.kotlin
    }

    artifacts {
        archives sourcesJar
    }
}

configure(project(':backend')) {
    apply plugin: 'kotlin'
    apply plugin: 'application'

    dependencies {
        compile('org.jetbrains.kotlin:kotlin-stdlib-jre8:1.2.10')
        compile('com.google.code.gson:gson:2.8.2')

        compile project(':model')
    }

    mainClassName = 'org.strangeway.kotlinhd.server.Server'
}

configure(project(':ui')) {
    apply plugin: 'kotlin2js'

    dependencies {
        compile 'org.jetbrains.kotlin:kotlin-stdlib-js:1.2.10'

        compile project(':backend')
        compile project(':model')
    }

    task prepareWeb(dependsOn: compileKotlin2Js) {
        inputs.dir file('src')
        inputs.dir file('web')
        outputs.dir file('build/web')

        doLast {
            copy {
                configurations.compile.each { File file ->
                    from(zipTree(file.absolutePath), {
                        includeEmptyDirs = false
                        include { fileTreeElement ->
                            def path = fileTreeElement.path
                            path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                                    !path.startsWith("META-INF/"))
                        }
                    })
                }
                from compileKotlin2Js.destinationDir
                from file('web')
                into "${projectDir}/build/web"
                includeEmptyDirs = false
            }
        }
    }

    compileKotlin2Js {
        kotlinOptions.outputFile = "${projectDir}/build/kjs/todolist.js"
        kotlinOptions.moduleKind = "plain"
        kotlinOptions.sourceMap = true
    }

    assemble.dependsOn prepareWeb
}

configure([project(':model'), project(':backend'), project(':ui')]) {
    sourceSets {
        main {
            kotlin {
                srcDirs += file('src')
                srcDirs += project(':model').sourceSets.main.kotlin.srcDirs
            }
        }
    }
}