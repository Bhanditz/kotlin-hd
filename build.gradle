plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.2.20' apply false
    id 'com.moowork.node' version '1.2.0' apply false
}

allprojects {
    repositories {
        jcenter()
        maven {
            url  "http://dl.bintray.com/kotlin/kotlinx.html/"
        }
    }
}

configure(project(':model')) {
    apply plugin: 'kotlin-platform-common'

    dependencies {
        compile 'org.jetbrains.kotlin:kotlin-stdlib-common:1.2.20'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.kotlin
    }

    artifacts {
        archives sourcesJar
    }
}

configure(project(':backend')) {
    apply plugin: 'kotlin'
    apply plugin: 'application'

    dependencies {
        compile('org.jetbrains.kotlin:kotlin-stdlib-jre8:1.2.20')
        compile('com.google.code.gson:gson:2.8.2')

        compile project(':model')
    }

    mainClassName = 'org.strangeway.kotlinhd.server.Server'
}

configure(project(':ui')) {
    apply plugin: 'kotlin2js'
    apply plugin: 'kotlin-dce-js'
    apply plugin: 'com.moowork.node'

    dependencies {
        compile 'org.jetbrains.kotlin:kotlin-stdlib-js:1.2.20'
        compile 'org.jetbrains.kotlinx:kotlinx-html-js:0.6.6'

        compile project(':model')
    }

    compileKotlin2Js {
        kotlinOptions.outputFile = "${projectDir}/build/kjs/todolist.js"
        kotlinOptions.moduleKind = "plain"
        kotlinOptions.sourceMap = false
    }

    node {
        version = '8.9.1'
        download = true
        nodeModulesDir = project.file('web')
    }

    npm_install {
        workingDir = project.file('web')
    }

    task prepareWeb(dependsOn: [compileKotlin2Js, runDceKotlinJs, npm_install,
                                project(':backend').installDist]) {
        inputs.dir file('src')
        inputs.dir file('web')
        inputs.dir project(':backend').file('build/install')
        outputs.dir file('build/web')

        doLast {
            file('build/web').deleteDir()

            copy {
                configurations.compile.each { File file ->
                    from(zipTree(file.absolutePath), {
                        includeEmptyDirs = false
                        include { fileTreeElement ->
                            def path = fileTreeElement.path
                            path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                                    !path.startsWith("META-INF/"))
                        }
                    })
                }
                into "${projectDir}/build/web"
            }

            copy {
                from file(compileKotlin2Js.destinationDir)
                into "${projectDir}/build/web"

                exclude '**/*.map'
                exclude '**/*.kjsm'
            }

            copy {
                from file('web')
                into "${projectDir}/build/web"
            }

            copy {
                from project(':backend').file('build/install')
                into "${projectDir}/build/web"
            }
        }
    }

    assemble.dependsOn prepareWeb

    task runElectron(dependsOn: prepareWeb) {
        doLast {
            def osName = System.getProperty('os.name').toLowerCase()
            def isWindows = osName.contains('windows')

            def localNodeInstallDir = ((File)node.workDir).listFiles().find {
                it.name.startsWith('node-') && it.name.contains(node.version)
            }
            def nodeDir = isWindows ? localNodeInstallDir : new File(localNodeInstallDir, 'bin')

            exec {
                workingDir 'build/web'
                environment 'PATH', System.getenv('PATH') + File.pathSeparator + nodeDir.absolutePath
                if (isWindows) {
                    commandLine 'cmd', '/c', '"./node_modules/.bin/electron" .'
                } else {
                    commandLine './node_modules/.bin/electron', '.'
                }
            }
        }
    }
}

configure([project(':model')]) {
    sourceSets {
        main {
            kotlin {
                srcDirs += file('src')
            }
        }
    }
}

configure([project(':ui'), project(':backend')]) {
    sourceSets {
        main {
            kotlin {
                srcDirs += file('src')
                // still required
                srcDirs += project(':model').sourceSets.main.kotlin.srcDirs
            }
        }
    }
}